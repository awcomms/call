// vite.config.ts
import { sveltekit } from "file:///C:/code/org/awcomms/call/node_modules/@sveltejs/kit/src/exports/vite/index.js";

// src/lib/getIO.ts
import { Server } from "file:///C:/code/org/awcomms/call/node_modules/socket.io/wrapper.mjs";
import { PineconeClient } from "file:///C:/code/org/awcomms/call/node_modules/@pinecone-database/pinecone/dist/index.js";
var pinecone = new PineconeClient();
var PINECONE_ENVIRONMENT = "us-east1-gcp";
var PINECONE_KEY = "81160c0d-8aef-4c52-b180-2c3123136b1f";
await pinecone.init({
  environment: PINECONE_ENVIRONMENT,
  apiKey: PINECONE_KEY
});
var index = pinecone.Index("entries");
var delete_id_from_pinecone = (id) => index.delete1({ ids: [id], namespace: "call" }).then((r) => {
  console.log("deleted", id);
  return r;
});
var ids = {};
var targets = {};
var requests = [];
var getIO = (server) => {
  const io = new Server(server);
  io.on("connection", (socket) => {
    socket.on("peer_id", (peer_id, ack) => {
      ids[socket.id] = peer_id;
      console.log("added", peer_id);
      console.log("ids", ids);
      ack();
    });
    socket.on("call", async (target_id, ack) => {
      console.log("targets", targets);
      console.log(socket.id, "wants to call", target_id);
      const target = requests.find((r) => r.peer_id === target_id);
      if (!target) {
        console.log(`target ${target_id} not found as peer_id in requests`);
        await delete_id_from_pinecone(target_id);
        ack(0);
        return;
      }
      const target_socket = io.sockets.sockets.get(target.socket_id);
      if (!target_socket || target_socket.connected) {
        console.log(`target_socket ${target.socket_id} not found or not connected`);
        await delete_id_from_pinecone(target_id);
        ack(0);
        return;
      }
      const caller = requests.find((r) => r.socket_id === socket.id);
      if (!caller) {
        console.log(`caller not found`, socket.id);
      }
      console.log("requests before setting target", requests);
      caller.target = target_id;
      console.log("requests after setting target, before checking can call", requests);
      if (target && target.target === caller.peer_id) {
        console.log("can call", target_id);
        ack(1);
      }
    });
    socket.on("disconnect", async () => {
      requests.splice(
        requests.findIndex((r) => r.socket_id === socket.id),
        1
      );
      const request = requests.find((r) => r.socket_id === socket.id);
      if (!request)
        return;
      await delete_id_from_pinecone(request.peer_id);
      console.log("deleted", request.peer_id);
    });
  });
  return io;
};

// web_socket_server_vite_plugin.js
var web_socket_server = {
  name: "web_socket_server",
  configureServer(server) {
    getIO(server.httpServer);
  }
};

// vite.config.ts
var config = {
  plugins: [sveltekit(), web_socket_server]
};
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
